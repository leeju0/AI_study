from sklearn.metrics import classification_report,accuracy_score, recall_score, f1_score
from sklearn.metrics import confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.models import Model
from tensorflow.keras.layers import concatenate,UpSampling2D,Activation,BatchNormalization,Input,Dense, Conv2D, MaxPooling2D, Dropout, Flatten
from tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten,GlobalAveragePooling2D
from tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping
from tensorflow.keras.utils import to_categorical


folder1 = "/content/drive/MyDrive/Label"
folder_list1 = os.listdir(folder1)

folder2 = "/content/drive/MyDrive/Label"
folder_list2 = os.listdir(folder2)

folder3 = "/content/drive/MyDrive/Label"
folder_list3 = os.listdir(folder3)

img_normal = []
img_glaucoma = []
img_other = []
label_1 = []
label_2 = []
label_3 = []
# Normal 이미지 로드 및 전처리
for filename in folder_list1:
    img_1 = os.path.join(folder1, filename)
    img1 = cv2.imread(img_1)
    img1 = img1[:, :, 1]  # Green 채널만 추출
    img_normal.append(cv2.resize(img1, (256, 256)).reshape((256, 256, 1)))
    label_1.append(0)

# Glaucoma 이미지 로드 및 전처리
for filename in folder_list2:
    img_2 = os.path.join(folder2, filename)
    img2 = cv2.imread(img_2)
    img2 = img2[:, :, 1]  # Green 채널만 추출
    img_glaucoma.append(cv2.resize(img2, (256, 256)).reshape((256, 256, 1)))
    label_2.append(1)

# Other 이미지 로드 및 전처리
for filename in folder_list3:
    img_3 = os.path.join(folder3, filename)
    img3 = cv2.imread(img_3)
    img3 = img3[:, :, 1]  # Green 채널만 추출
    img_other.append(cv2.resize(img3, (256, 256)).reshape((256, 256, 1)))
    label_3.append(2)

# Combine the image and label lists
images = img_a + img_b + img_c
labels = label_a + label_b  +label_c 

resized_images = []

for img in images:

    resized_img = cv2.resize(img, (256, 256))
    resized_img = resized_img.reshape((256, 256, 1))
    resized_images.append(resized_img)
X_train, X_test, y_train, y_test = train_test_split(resized_images, labels, test_size=0.2, shuffle=True)

# 레이블 원-핫 인코딩
y_train = to_categorical(y_train, num_classes=3)
y_test = to_categorical(y_test, num_classes=3)
# Convert lists to numpy arrays if not already converted
X_train = np.array(X_train)
X_test = np.array(X_test)
y_train = np.array(y_train)
y_test = np.array(y_test)

X_train = X_train.reshape(-1, 256, 256, 1).astype('float32') / 255
X_test = X_test.reshape(-1, 256, 256, 1).astype('float32') / 255

# U-Net 모델 정의
def UNet(pretrained_weights=None, input_size=(256, 256, 1)):
    inputs = Input(input_size)
    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(inputs)
    conv1 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv1)
    pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)

    conv2 = Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool1)
    conv2 = Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv2)
    pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)

    conv3 = Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool2)
    conv3 = Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv3)
    pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)

    conv4 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool3)
    conv4 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv4)
    drop4 = Dropout(0.5)(conv4)
    pool4 = MaxPooling2D(pool_size=(2, 2))(drop4)

    conv5 = Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(pool4)
    conv5 = Conv2D(1024, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv5)
    drop5 = Dropout(0.5)(conv5)

    up6 = Conv2D(512, 2, activation='relu', padding='same', kernel_initializer='he_normal')(UpSampling2D(size=(2, 2))(drop5))
    merge6 = concatenate([drop4, up6], axis=3)
    conv6 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(merge6)
    conv6 = Conv2D(512, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv6)

    up7 = Conv2D(256, 2, activation='relu', padding='same', kernel_initializer='he_normal')(UpSampling2D(size=(2, 2))(conv6))
    merge7 = concatenate([conv3, up7], axis=3)
    conv7 = Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(merge7)
    conv7 = Conv2D(256, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv7)

    up8 = Conv2D(128, 2, activation='relu', padding='same', kernel_initializer='he_normal')(UpSampling2D(size=(2, 2))(conv7))
    merge8 = concatenate([conv2, up8], axis=3)
    conv8 = Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(merge8)
    conv8 = Conv2D(128, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv8)

    up9 = Conv2D(64, 2, activation='relu', padding='same', kernel_initializer='he_normal')(UpSampling2D(size=(2, 2))(conv8))
    merge9 = concatenate([conv1, up9], axis=3)
    conv9 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(merge9)
    conv9 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv9)
    conv9 = Conv2D(64, 3, activation='relu', padding='same', kernel_initializer='he_normal')(conv9)

    # Global Average Pooling을 추가하여 각 클래스의 점수를 계산
    gap = GlobalAveragePooling2D()(conv9)
    output = Dense(3, activation='softmax')(gap)

    model = Model(inputs, output)
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    return model
# 모델 생성
model = UNet(input_size=(256, 256, 1))

# 모델 훈련
history = model.fit(X_train, y_train, validation_split=0.2, epochs=80, batch_size=32, 
                    callbacks=[ModelCheckpoint('model.h5', save_best_only=True), EarlyStopping(patience=10)])
y_pred = model.predict(X_test)

y_pred_classes = np.argmax(y_pred, axis=1)
y_test_classes = np.argmax(y_test, axis=1)
# 평가
print(classification_report(y_test_classes, y_pred_classes))
